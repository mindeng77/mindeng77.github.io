[ { "title": "refresh token으로 access token발급", "url": "/posts/refresh-token%EC%9C%BC%EB%A1%9C-access-token%EB%B0%9C%EA%B8%89/", "categories": "Javascript, React.js", "tags": "axios, refresh token", "date": "2023-09-01 13:55:00 +0900", "snippet": " axios로 요청시 401에러가 발생하면 가지고 있던 refresh token으로 요청 토큰 재발급 후 이전 요청 다시 요청 토큰 재발급 중복 요청 방지axios.jsimport axios from \"axios\";import store from \"../stores\";import { setLoading } from \"../stores/loadingSlice\";import { setIsLogout } from \"../stores/logoutSlice\";const instance = axios.create({ baseURL: process.env.REACT_APP_API_URL, timeout: 1000 * 60,});let isRefreshing = false;const refreshSubscribers = [];/** * 리프래시 토큰으로 신규 액세스토큰 발급 * @returns */const getAccessTokenByRefreshToken = async () =&gt; { try { const localStorageUser = window.localStorage.getItem(\"user\"); if (localStorageUser &amp;&amp; localStorageUser !== \"null\") { const user = JSON.parse(localStorageUser); const { data } = await axios.post( `${process.env.REACT_APP_API_URL}/api/master/auth/refresh`, null, { headers: { Authorization: `Bearer ${user.refreshToken}`, }, } ); if (data.resultCode === \"OK\") { const { accessToken: newAccessToken } = data.data; user.accessToken = newAccessToken; window.localStorage.setItem(\"user\", JSON.stringify(user)); refreshSubscribers.forEach((callback) =&gt; { callback(newAccessToken); }); return newAccessToken; } } } catch (error) { return null; }};instance.interceptors.request.use(async (config) =&gt; { try { const isLoading = store.getState().loading.isLoading; if (isLoading === false) { store.dispatch(setLoading(true)); } const localStorageUser = window.localStorage.getItem(\"user\"); if (localStorageUser &amp;&amp; localStorageUser !== \"null\") { const { usrId, accessToken, tenantId } = JSON.parse(localStorageUser); if (usrId) { config.headers.usrId = usrId; } if (accessToken) { config.headers.Authorization = `Bearer ${accessToken}`; } if (tenantId) { config.headers[\"x-smp-project-code\"] = tenantId; } } } catch (err) { console.log(err); } return config;});instance.interceptors.response.use( (response) =&gt; { store.dispatch(setLoading(false)); const { data } = response; return data; }, async (error) =&gt; { store.dispatch(setLoading(false)); // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다. if (error.response) { if (error.response.status === 404) { alert(\"page not found\"); } else if (error.response.status === 401) { const { config: originRequest } = error; if (isRefreshing) { return new Promise((resolve) =&gt; { refreshSubscribers.push((token) =&gt; { originRequest.headers.Authorization = `Bearer ${token}`; resolve(axios(originRequest)); }); }); } isRefreshing = true; const newAccessToken = await getAccessTokenByRefreshToken(); isRefreshing = false; if (newAccessToken) { originRequest.headers.Authorization = `Bearer ${newAccessToken}`; return axios(originRequest); } else { store.dispatch(setIsLogout(true)); return { resultCode: \"OK\", }; } } else { console.error(error.message); } } // 요청이 이루어 졌으나 응답을 받지 못했습니다. else if (error.request) { console.log( \"요청이 이루어 졌으나 응답을 받지 못했습니다.\", error.message ); } else { console.log( \"오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\", error.message ); } });export default instance;" }, { "title": "자주 쓰는 git 명령어", "url": "/posts/%EC%9E%90%EC%A3%BC-%EC%93%B0%EB%8A%94-git-%EB%AA%85%EB%A0%B9%EC%96%B4/", "categories": "Tool", "tags": "git", "date": "2023-05-04 16:20:00 +0900", "snippet": "상태 조회git statusgit addgit add는 Working Directory에 있는 변경된 파일들을 Staging Area에 올리는 명령어.# 현재 디렉토리 하위에 있는 모든 변경 사항git add .# 디렉토리 위치에 상관없이 모든 변경 사항git add -A# 특정 파일git add src/page/index.html# 특정 파일 다수git add src/page/index.html src/page/list.html# 특정 폴더git add src/pagegit diff# Working Directory와 Staging Area의 비교git diff# Staging Area와 Repository와 비교git diff --staged# Working Directory, Staging Area의 변경사항을 Repository의 HEAD 커밋과 비교git commitgit pushgit branch# 로컬브랜치 목록과 현재 브랜치 표시git branch# 로컬브랜치 삭제git branch -D {브랜치명}# 원격브랜치 삭제git branch -d -r origin/{브랜치명}git checkout# 로컬 브랜치 변경git checkout {브랜치명}# 원격 브랜치 체크아웃git checkout -b {로컬에 저장할 브랜치명} origin/{원격브랜치명}git merge# master에다가 feature/test 머지하기git checkout mastergit merge feature/test" }, { "title": "npm package를 tgz로 압축하기", "url": "/posts/npm-package%EB%A5%BC-tgz%EB%A1%9C-%EC%95%95%EC%B6%95%ED%95%98%EA%B8%B0/", "categories": "Tool", "tags": "npm, tgz", "date": "2023-05-04 16:20:00 +0900", "snippet": "nexus에 npm 패키지를 업로드하기 위해서 tgz파일로 압축을 해야하는데 npm으로는 방법을 찾지 못했는데, yarn으로 가능하다./.yarnrcyarn-offline-mirror \"./npm_packages\"yarn-offline-mirror-pruning true위의 파일을 만들고 yarn으로 패키지 설치를 하면 /npm_packages 폴더에 각 패키지들이 tgz파일로 만들어진다." }, { "title": "axios에서 redux사용하기", "url": "/posts/axios%EC%97%90%EC%84%9C-redux%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/", "categories": "Javascript, React.js", "tags": "React.js, axios, 로딩바", "date": "2023-04-26 17:31:00 +0900", "snippet": "조건 서버 요청 중에 로딩바를 보여주고, 응답을 받으면 로딩바를 숨기고 싶다. redux로 로딩중 정보를 등록하여 관리제약 컴포넌트가 아닌 영역에서 useSelector, useDispatch를 사용할 수 없다.해결None Component에서 직접 store정보에 접근하여 사용이 가능함/src/store/loadingSlice.jsimport { createSlice } from \"@reduxjs/toolkit\";export const loadingSlice = createSlice({ name: \"loading\", initialState: { isLoading: false, }, reducers: { setLoading: (state, action) =&gt; { state.isLoading = action.payload; }, },});export const { setLoading } = loadingSlice.actions;export default loadingSlice.reducer;/src/store/index.jsimport { configureStore } from \"@reduxjs/toolkit\";import thunkMiddleware from \"redux-thunk\";import loading from \"./loadingSlice\";const store = configureStore({ reducer: { loading, }, middleware: (getDefaultMiddleware) =&gt; getDefaultMiddleware().concat(thunkMiddleware),});export default store;/src/util/axios.jsimport axios from \"axios\";import store from \"../stores\";import { setLoading } from \"../stores/loadingSlice\";const instance = axios.create({ baseURL: process.env.REACT_APP_API_URL, timeout: 1000 * 10,});instance.interceptors.request.use(async (config) =&gt; { try { const isLoading = store.getState().loading.isLoading; if (isLoading === false) { store.dispatch(setLoading(true)); } /* 요청처리 생략 */ } catch (err) { console.log(err); } return config;});instance.interceptors.response.use( (response) =&gt; { store.dispatch(setLoading(false)); /* 응답처리 생략 */ }, (error) =&gt; { store.dispatch(setLoading(false)); /* 에러처리 생략 */ });export default instance;/src/App.jsxui template으로 mui를 사용import React from \"react\";import { Route, Routes } from \"react-router-dom\";import { useSelector } from \"react-redux\";import CircularProgress from \"@mui/material/CircularProgress\";import Dialog from \"@mui/material/Dialog\";import DialogContent from \"@mui/material/DialogContent\";import \"./App.css\";const CircularProgressCentered = ({ open }) =&gt; { return ( &lt;Dialog&gt; &lt;DialogContent&gt; &lt;CircularProgress size={50} /&gt; &lt;/DialogContent&gt; &lt;/Dialog&gt; );};function App() { const { isLoading } = useSelector((state) =&gt; state.loading); return ( &lt;&gt; {/* 생략 */} &lt;CircularProgressCentered open={isLoading} /&gt; &lt;/&gt; );}export default App;" }, { "title": "window에서 base64 인코딩", "url": "/posts/window%EC%97%90%EC%84%9Cbase64/", "categories": "Tool", "tags": "window base64", "date": "2023-04-25 16:20:00 +0900", "snippet": " Power Shell을 실행 다음 코드에서 인코딩할 부분 수정 후 실행 $plainText = \"비밀번호\" # 인코딩할 문자열$base64Encoded = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($plainText))$base64Encoded # 결과 출력" }, { "title": "docker명령어", "url": "/posts/docker%EB%AA%85%EB%A0%B9%EC%96%B4/", "categories": "server", "tags": "docker", "date": "2023-04-25 15:20:00 +0900", "snippet": "docker 빌드docker build -t {이미지이름:태그} .컨테이너 실행docker run -d --name {컨테이너이름} -p {호스트포트}:{컨테이너포트} {이미지이름:태그}컨테이너 접속docker exec -it {컨테이너이름} /bin/bash이미지 파일 저장docker save -o {파일명}.tar {이미지이름:태그}이미지 파일 로드docker load &lt; {파일명}.tar" }, { "title": "linux git server 구축", "url": "/posts/linux-git-server-%EA%B5%AC%EC%B6%95/", "categories": "server", "tags": "linux git server", "date": "2023-03-06 15:04:00 +0900", "snippet": "조건 이미 제공 받은 계정이 있음: user01 OS: Amazon Linux ssh 접속 하나의 계정으로 여러 개발자들이 사용(config git name/email은 각각 설정)ssh 설정local에서 git-bash 설치 후, 다음 명령어로 키 생성ssh-keygen두 개의 파일이 생기는데 id_rsa(개인키), id_rsa.pub(공용키) 공용키를 서버에 업로드server에서 .ssh 폴더 생성mkdir ~/.ssh업로드한 공용키를 등록cat id_rsa.pub » ~/.ssh/authorized_keys ssh 연결 설정은 끝git 설치sudo yum install git저장소 만들기sudo mkdir -p /gitsudo chown -R user01:user01 /git/cd /gitgit init --bare sample.gitlocal에서 저장소 생성 및 remote pushmd samplecd samplegit initgit remote add origin ssh://user01@{서버주소}:{포트}/git/sample.gitgit push -u origin mastergit clonegit clone ssh://user01@{서버주소}:{포트}/git/sample.gitgit config user.name \"이름\"git config user.email \"이메일\"" }, { "title": "auto hide header on scroll", "url": "/posts/auto-hide-header/", "categories": "Javascript, React Native", "tags": "React Native, auto hide header", "date": "2023-02-20 17:43:00 +0900", "snippet": "스크롤에 따라 헤더를 숨김 처리환경 expo@~47.0.12 react-native-reanimated@~2.12.0expo 환경에서 react-native-reanimated를 사용하려면 다음과 같은 설정을 해야한다.(참고)// babel.config.jsmodule.exports = function (api) { api.cache(true); return { presets: [\"babel-preset-expo\"], plugins: [\"react-native-reanimated/plugin\"], // 이부분 추가 };};Component컴포넌트로 만들었다.// components/HeaderHideScrollView.jsximport { Platform, StatusBar, View } from \"react-native\";import Animated from \"react-native-reanimated\";const HEADER_HEIGHT = Platform.OS === \"ios\" ? 115 : 70 + StatusBar.currentHeight;export default function HeaderHideScrollView({ children }) { const scrollY = new Animated.Value(0); const diffClampScrollY = Animated.diffClamp(scrollY, 0, HEADER_HEIGHT); const headerY = Animated.interpolateNode(diffClampScrollY, { inputRange: [0, HEADER_HEIGHT], outputRange: [0, -HEADER_HEIGHT], }); return ( &lt;View style={{ flex: 1 }}&gt; &lt;Animated.View style={{ position: \"absolute\", left: 0, right: 0, top: 0, height: HEADER_HEIGHT, backgroundColor: \"grey\", transform: [ { translateY: headerY, }, ], }} /&gt; &lt;Animated.ScrollView bounces={false} scrollEventThrottle={16} style={{ paddingTop: HEADER_HEIGHT }} onScroll={Animated.event([ { nativeEvent: { contentOffset: { y: scrollY, }, }, }, ])} &gt; {children} &lt;/Animated.ScrollView&gt; &lt;/View&gt; );}사용// screens/main/HomeScreen.jsximport { Text } from \"react-native\";import HeaderHideScrollView from \"../../components/HeaderHideScrollView\";const list = [ \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",];export default function HomeScreen() { return ( &lt;HeaderHideScrollView&gt; {list.map((item, index) =&gt; ( &lt;Text key={index} style=&gt; {item} &lt;/Text&gt; ))} &lt;/HeaderHideScrollView&gt; );}참고https://kr.noxinfluencer.com/youtube/video-analytics/JPx8IlfYQ-c 위 주소에서 개발할때 버전의 차이인지 Animated.interpolate() 함수가 없어서 Animated.interpolateNode() 함수를 사용했다." }, { "title": "moment의 locale을 dynamic하게 import하기", "url": "/posts/moment%EC%9D%98-locale%EC%9D%84-dynamic%ED%95%98%EA%B2%8C-import%ED%95%98%EA%B8%B0/", "categories": "Javascript, React Native", "tags": "moment, dynamic import", "date": "2023-02-10 14:05:00 +0900", "snippet": "locale에 따라 한국어, 영어, 일본어로 표시하고 싶은데 공식문서를 보면 다음과 같이 최상단에 import를 하고, locale를 ko로 변경하면 한글은 잘 나온다.import moment from 'moment';import \"moment/locale/ko\"; // 한국어...moment().locale('ko');console.log(moment().format('LLL')); // 2023년 2월 10일 오후 2:24영문으로 표현하기 위해 다음처럼 변경을 했지만 영문으로 표시가 되지 않는다.import moment from 'moment';import \"moment/locale/ko\"; // 한국어...moment().locale('en');console.log(moment().format('LLL')); // 2023년 2월 10일 오후 2:24상단의 import 구문을 제거했더니 영문으로 표시가 된다.import moment from 'moment';...moment().locale('en');console.log(moment().format('LLL')); // February 10, 2023 2:29 PMimport 구문은 최 상단에 위치해야되어 위와 같은 방법으로는 각 언어별로 import를 할 수 없다.원래 하고자 했던건 다음 처럼 locale에 따라 언어를 설정하고자 했지만 문제가 맨 마지막에 import 한 언어로 표시가 된다는것이다.import * as Localization from 'expo-localization';import moment from 'moment';import \"moment/locale/ko\"; // 한국어import \"moment/locale/ja\"; // 일본어...if (Localization.locale === 'ko-KR') { moment().locale('ko');} else if (Localization.locale === 'ja-JP') { moment().locale('ja');} else { moment().locale('en');}console.log(moment().format('LLL')); // 2023年2月10日 14:35그래서 다음과 같이 dynamic import를 하는 방식으로 해결했다.import * as Localization from 'expo-localization';import moment from 'moment';...if (Localization.locale === 'ko-KR') { import('moment/locale/ko').then(() =&gt; moment().locale('ko'));} else if (Localization.locale === 'ja-JP') { import('moment/locale/ja').then(() =&gt; moment().locale('ja'));}" }, { "title": "expo 환경변수설정", "url": "/posts/expo-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98%EC%84%A4%EC%A0%95/", "categories": "Javascript, React Native", "tags": "React Native, expo", "date": "2023-02-08 14:41:00 +0900", "snippet": "환경 “expo”: “~47.0.8” “react-native”: “0.70.5”&gt; eas -veas-cli/3.5.2 win32-x64 node-v18.13.0소스package.json...\"scripts\": { ... \"start-win-local\": \"set APP_ENV=local&amp;expo start\", // 로컬에서 expo 및 api서버 둘다 실행(window) \"start-win-dev\": \"set APP_ENV=development&amp;expo start\", // 로컬에서 expo 실행 및 api 서버는 개발서버 사용(window) \"start-ios-local\": \"APP_ENV=local expo start\", // 로컬에서 expo 및 api서버 둘다 실행(mac) \"start-ios-dev\": \"APP_ENV=development expo start\", // 로컬에서 expo 실행 및 api 서버는 개발서버 사용(mac) \"build-dev-android\": \"eas build -p android --profile development\", // API개발서버를 바라보고 android용으로 빌드 \"build-dev-ios\": \"eas build -p ios --profile development\", // API개발서버를 바라보고 IOS용으로 빌드 \"build-android\": \"eas build -p android --profile production\", // API운영서버를 바라보고 android용으로 빌드 \"build-ios\": \"eas build -p ios --profile production\" // API운영서버를 바라보고 IOS용으로 빌드},... 핵심은 로컬에서 실행시엔 APP_ENV=(local|development|production)로 환경 변수를 넣어주고, 빌드시엔 --profile (development|production) 으로 profile을 지정eas.jsoneas를 이용하여 빌드시 development, production 두 개의 profile을 설정하고 env.APP_ENV의 항목을 항목별로 설정{ \"cli\": { \"version\": \"&gt;= 3.4.1\" }, \"build\": { \"development\": { \"ios\": { \"resourceClass\": \"m1-medium\" }, \"android\": { \"buildType\": \"apk\" }, \"env\": { \"APP_ENV\": \"development\" } }, \"production\": { \"ios\": { \"resourceClass\": \"m1-medium\" }, \"android\": { \"buildType\": \"apk\" }, \"env\": { \"APP_ENV\": \"production\" } } }, \"submit\": { \"production\": {} }}app.config.jsconst ENV = { local: { APP_ENV: \"local\", apiUrl: \"http://localhost:3000/m\", }, development: { APP_ENV: \"development\", apiUrl: \"http://development:3000/m\", }, production: { APP_ENV: \"production\", apiUrl: \"http://production/m\", },};// config는 app.json의 내용module.exports = ({ config }) =&gt; { let env = ENV.production; if (process.env.APP_ENV === \"local\") { env = ENV.local; } else if (process.env.APP_ENV === \"development\") { env = ENV.development; } // extra에 환경별 변수를 추가 return { ...config, extra: { ...config.extra, ...env, }, };};사용로컬에서 실행했을 경우yarn start-win-localimport Constants from \"expo-constants\";console.log(Constants.manifest.extra.APP_ENV); // localconsole.log(Constants.manifest.extra.apiUrl); // http://localhost:3000/m" }, { "title": "useState hook으로 생성한 상태정보를 set할때 callback 함수 사용하기", "url": "/posts/useState-hook%EC%97%90%EC%84%9C-callback%EC%82%AC%EC%9A%A9/", "categories": "Javascript, React Native", "tags": "React Native", "date": "2023-02-07 10:38:00 +0900", "snippet": "소스// for javascriptfunction useStateCallback(initialState) { const [state, setState] = useState(initialState); const cbRef = useRef(null); // init mutable ref container for callbacks const setStateCallback = useCallback((state, cb) =&gt; { cbRef.current = cb; // store current, passed callback in ref setState(state); }, []); // keep object reference stable, exactly like `useState` useEffect(() =&gt; { // cb.current is `null` on initial render, // so we only invoke callback on state *updates* if (cbRef.current) { cbRef.current(state); cbRef.current = null; // reset callback after execution } }, [state]); return [state, setStateCallback];}// for typescriptfunction useStateCallback&lt;T&gt;( initialState: T): [T, (state: T, cb?: (state: T) =&gt; void) =&gt; void] { const [state, setState] = useState(initialState); const cbRef = useRef&lt;((state: T) =&gt; void) | undefined&gt;(undefined); // init mutable ref container for callbacks const setStateCallback = useCallback((state: T, cb?: (state: T) =&gt; void) =&gt; { cbRef.current = cb; // store current, passed callback in ref setState(state); }, []); // keep object reference stable, exactly like `useState` useEffect(() =&gt; { // cb.current is `undefined` on initial render, // so we only invoke callback on state *updates* if (cbRef.current) { cbRef.current(state); cbRef.current = undefined; // reset callbafunction useStateCallback&lt;T&gt;( initialState: T): [T, (state: T, cb?: (state: T) =&gt; void) =&gt; void] { const [state, setState] = useState(initialState); const cbRef = useRef&lt;((state: T) =&gt; void) | undefined&gt;(undefined); // init mutable ref container for callbacks const setStateCallback = useCallback((state: T, cb?: (state: T) =&gt; void) =&gt; { cbRef.current = cb; // store current, passed callback in ref setState(state); }, []); // keep object reference stable, exactly like `useState` useEffect(() =&gt; { // cb.current is `undefined` on initial render, // so we only invoke callback on state *updates* if (cbRef.current) { cbRef.current(state); cbRef.current = undefined; // reset callback after execution } }, [state]); return [state, setStateCallback];}ck after execution } }, [state]); return [state, setStateCallback];}출처https://stackoverflow.com/questions/54954091/how-to-use-callback-with-usestate-hook-in-react" }, { "title": "native base에서 safe area 처리", "url": "/posts/Notch-bottom%EC%B2%98%EB%A6%AC/", "categories": "Javascript, React Native", "tags": "React Native, ios, notch, SafeAreaView", "date": "2023-02-04 15:25:00 +0900", "snippet": "환경 expo@47.0.8 @react-navigation/native@6.0.14 native-base@3.4.23문제native-base을 이용하여 개발을 하다보니 Android에선 문제가 없었는데 IOS에서는 Notch bottom영역이 겹치는 문제가 발생했다. App.jsx에서 SafeAreaProvider를 적용하거나 각 화면에서 SafeAreaView를 적용해봐도 원하는 결과가 나오지 않음.App.jsx동작안함...import { SafeAreaProvider } from 'react-native-safe-area-context';...&lt;Provider store={store}&gt; &lt;NativeBaseProvider colorModeManager={colorModeManager} theme={theme}&gt; &lt;SafeAreaProvider&gt; &lt;LocalizationContext.Provider value={localizationContextValue}&gt; &lt;NavigationContainer ref={NavigationService.navigationRef}&gt; &lt;MainScreen /&gt; &lt;/NavigationContainer&gt; &lt;/LocalizationContext.Provider&gt; &lt;/SafeAreaProvider&gt; &lt;/NativeBaseProvider&gt;&lt;/Provider&gt;해결native-base에서 제공해주는 useSafeArea를 사용하여 해결했다.나는 bottom에만 겹치는 현상이 있어서 bottom쪽만 설정했다.import { Box, useSafeArea } from \"native-base\";export default function SignUpScreen() { const { stepStyle } = useStepScreenContext(); const safeAreaProps = useSafeArea({ safeAreaBottom: true, }); return ( &lt;Box flex=\"1\" {...safeAreaProps}&gt; ... &lt;/Box&gt; );}" }, { "title": "IOS Simulator 키보드 안보일때", "url": "/posts/IOS-Simulator-%ED%82%A4%EB%B3%B4%EB%93%9C-%EC%95%88%EB%B3%B4%EC%9D%BC%EB%95%8C/", "categories": "Tool", "tags": "IOS, Simulator", "date": "2023-02-04 10:40:00 +0900", "snippet": " 방법1(메뉴)Simulator &gt; I/O &gt; Keyboard &gt; Connect Hardware Keyboard 체크 해제 방법2(단축키) ⇧+⌘+K Simulator Version 14.2 기준" }, { "title": "pm2 설정 및 실행", "url": "/posts/pm2-%EC%84%A4%EC%A0%95-%EB%B0%8F-%EC%8B%A4%ED%96%89/", "categories": "Tool", "tags": "git", "date": "2023-02-01 16:59:00 +0900", "snippet": "설정파일ecosystem.config.jsmodule.exports = { apps: [ { name: \"pm2 name\", // pm2 name script: \"./bin/www\", // // 앱 실행 스크립트 instances: 1, // 클러스터 모드 사용 시 생성할 인스턴스 수 exec_mode: \"cluster\", // fork, cluster 모드 중 선택 merge_logs: true, // 클러스터 모드 사용 시 각 클러스터에서 생성되는 로그를 한 파일로 합쳐준다. autorestart: true, // 프로세스 실패 시 자동으로 재시작할지 선택 watch: true, // 파일이 변경되었을 때 재시작 할지 선택 // max_memory_restart: \"512M\", // 프로그램의 메모리 크기가 일정 크기 이상이 되면 재시작한다. env: { // 개발 환경설정 NODE_ENV: \"dev\", DEBUG: \"app*,debug*,error*,info*\", }, env_production: { // 운영 환경설정 (--env prod 옵션으로 지정할 수 있다.) NODE_ENV: \"prod\", DEBUG: \"debug*,error**\", }, }, ],};pm2 명령어실행pm2 start ecosystem.config.js목록확인pm2 list종료pm2 stop {id} {id}는 pm2 list에서 나온 목록의 id 번호를 입력" }, { "title": "git 인증정보 저장", "url": "/posts/git%EC%9D%B8%EC%A6%9D%EC%A0%95%EB%B3%B4%EC%A0%80%EC%9E%A5/", "categories": "Tool", "tags": "git", "date": "2023-02-01 16:57:00 +0900", "snippet": "git config credential.helper store위 명령어 실행 후 push하면 다음에는 물어보지 않는다." }, { "title": "env-cmd를 이용한 react 환경변수 설정", "url": "/posts/env-cmd%EC%9D%98-%EC%82%AC%EC%9A%A9/", "categories": "Javascript, React.js", "tags": "React.js, env-cmd", "date": "2023-01-27 13:27:00 +0900", "snippet": "프로젝트를 진행할때면 보통 다음의 환경들로 구분하여 개발이 진행되는데 local: 각 개발자가 로컬에서 개발하기 위한 환경 development: 개발 서버를 두어 기능 테스트하기 위한 환경 staging or qa: 운영전 품질 또는 통합 테스트를 하기 위한 환경 production: 운영하기 위한 환경CRA(Create React App) 프로젝트에서 제공해주는 환경(enviroment)의 종류가 developemnt 와 production만 있다보니 별도의 작업이 필요하다.development는 react-scripts start로 실행할 경우, production은 react-scripts build로 빌드하여 서버에서 배포하여 실행했을 경우.여러 방법 중에 env-cmd를 활용한 방법이 제일 간단해보인다.패키지 설치# yarnyarn add env-cmd# npmnpm i env-cmdhttps://www.npmjs.com/package/env-cmd설정설정하는 방법은 여러가지가 있는데 각 환경별 파일들(.env.local .env.development .env.staging…)을 두어서 하는 방법이 대부분인데..환경 변수가 많지 않을 경우에는 .env-cmdrc파일을 이용하는 방법이 제일 간단해보인다..env-cmdrc{ \"local\": { \"REACT_APP_API_URL\": \"http://localhost:8080\" }, \"development\": { \"REACT_APP_API_URL\": \"http://development:8080\" }, \"staging\": { \"REACT_APP_API_URL\": \"http://staging:8080\" }, \"production\": { \"REACT_APP_API_URL\": \"http://production:8080\" }}각 환경의 이름은 정해진것은 아니라 임의로 작성하면된다.package.json \"scripts\": { \"start\": \"env-cmd -e local react-scripts start\", \"start:dev\": \"env-cmd -e development react-scripts start\", \"start:stg\": \"env-cmd -e staging react-scripts start\", \"build:dev\": \"env-cmd -e development react-scripts build\", \"build:stg\": \"env-cmd -e staging react-scripts build\", \"build:prd\": \"env-cmd -e production react-scripts build\", \"test\": \"react-scripts test\", \"eject\": \"react-scripts eject\" },-e 옵션을 주어 환경의 이름을 뒤에 작성하면된다.로컬 테스트로컬에서 실행yarn start로컬에서 개발서버용으로 실행yarn start:dev 실행을 하면 NODE_ENV의 값이 development로 표시서버에 배포하여 테스트배포 테스트를 위해 npm serve를 이용npm i -g servestaging으로 빌드하여 테스트빌드를 하면 build폴더에 결과 파일들이 생성된다.yarn build:stgserve를 이용하여 실행serve -s buildproduction으로 빌드하여 테스트yarn build:prd 빌드를 하면 NODE_ENV의 값이 production으로 표시" }, { "title": "MAC에서 STS 실행오류", "url": "/posts/Mac%EC%97%90%EC%84%9CSTS%EC%8B%A4%ED%96%89%EC%98%A4%EB%A5%98/", "categories": "Tool", "tags": "STS, mac", "date": "2023-01-21 11:31:00 +0900", "snippet": "잘되던게 갑자기 실행 오류가 날때 다음 스크립트를 실행하면 아마 될지도??codesign --force --deep --sign - /Applications/SpringToolSuite4.app/Contents/MacOS/SpringToolSuite4" }, { "title": "postman 모든 요청에 access token 자동 설정", "url": "/posts/postman-%EB%AA%A8%EB%93%A0-%EC%9A%94%EC%B2%AD%EC%97%90-access-token-%EC%9E%90%EB%8F%99-%EC%84%A4%EC%A0%95/", "categories": "Tool", "tags": "postman", "date": "2023-01-19 14:09:00 +0900", "snippet": "사전작업Enviroments에서 환경변수 추가 server-url: 서버주소 access-token: 엑세스 토큰 access-token-expire: 만료시간Pre-request Script 추가적용하고자 하는 folder나 request의 Pre-request Script 탭에서 다음 스크립트 추가folder에 적용할 경우 속한 request에서 Authorization탭에서 Type을 Inherit auth from parent(부모에서 상속)로 설정해야 함.// 토근이 없거나 만료되었을 경우에만 토큰 요청let isGetToken = true;if ( !pm.environment.get(\"access-token-expire\") || !pm.environment.get(\"access-token\")) { console.log(\"Token or expiry date are missing\");} else if (pm.environment.get(\"access-token-expire\") &lt;= new Date().getTime()) { console.log(\"Token is expired\");} else { isGetToken = false; console.log(\"Token and expiry date are all good\");}if (isGetToken) { const serverUrl = pm.environment.get(\"server-url\"); const options = { url: `${serverUrl}/rest/auth/login`, method: \"POST\", header: { \"Content-Type\": \"application/json\", }, body: { mode: \"application/json\", raw: JSON.stringify({ usrId: \"test\", usrPwd: \"1234\", }), }, }; pm.sendRequest(options, (err, response) =&gt; { if (err === null) { const { retcode, data } = response.json(); if (retcode === \"OK\") { const { accessToken, accessTokenExpire } = data; pm.environment.set(\"access-token\", accessToken); pm.environment.set(\"access-token-expire\", accessTokenExpire); } } });}" }, { "title": "React Router v6에서 권한처리", "url": "/posts/react-router-dom-v6%EC%97%90%EC%84%9C-%EA%B6%8C%ED%95%9C%EC%B2%98%EB%A6%AC/", "categories": "Javascript, React.js", "tags": "React.js, React Router", "date": "2023-01-10 16:51:00 +0900", "snippet": "기본 설정/src/hooks/useLocalStorage.js로그인 정보를 저장하기 위한 유틸import { useState } from \"react\";export const useLocalStorage = (keyName, defaultValue) =&gt; { const [storedValue, setStoredValue] = useState(() =&gt; { try { const value = window.localStorage.getItem(keyName); if (value) { return JSON.parse(value); } else { window.localStorage.setItem(keyName, JSON.stringify(defaultValue)); return defaultValue; } } catch (err) { return defaultValue; } }); const setValue = (newValue) =&gt; { try { window.localStorage.setItem(keyName, JSON.stringify(newValue)); } catch (err) { console.log(err); } setStoredValue(newValue); }; return [storedValue, setValue];};/src/context/AuthContext.jsxContext를 이용하여 AuthProvider 하위의 컴포넌트에서 로그인, 로그아웃, 사용자 정보에 접근할 수 있게 한다.import React, { createContext, useContext, useMemo } from \"react\";import { useNavigate } from \"react-router-dom\";import { useLocalStorage } from \"../hooks/useLocalStorage\";const AuthContext = createContext();export const AuthProvider = ({ children }) =&gt; { const [user, setUser] = useLocalStorage(\"user\", null); const navigate = useNavigate(); /** * 로그인 처리 후 메인화면으로 이동 * @param {any} data */ const login = async (data) =&gt; { setUser(data); navigate(\"/\"); }; /** * 로그아웃 처리 후 로그인 화면으로 이동 */ const logout = () =&gt; { setUser(null); navigate(\"/login\", { replace: true }); }; /** * 로그인 여부 조회 * @returns true: 로그인상태, false: 로그아웃상태 */ const isLogin = () =&gt; { return !!user; }; const value = useMemo( () =&gt; ({ user, login, logout, isLogin, }), [user] ); return &lt;AuthContext.Provider value={value}&gt;{children}&lt;/AuthContext.Provider&gt;;};export const useAuth = () =&gt; { return useContext(AuthContext);};/src/components/layout/auth/AuthLayout.jsxAuthProvider를 감싸서 하위의 컴포넌트들이 권한 정보의 접근이 가능하게 함.import React from \"react\";import { useOutlet } from \"react-router-dom\";import { AuthProvider } from \"../../context/AuthContext\";const AuthLayout = () =&gt; { const outlet = useOutlet(); return &lt;AuthProvider&gt;{outlet}&lt;/AuthProvider&gt;;};export default AuthLayout;/src/components/auth/ProtectedLayout.jsx전체 layout을 구성하고 로그인 체크를 한다. 로그인이 필요한 모든 화면은 해당 컴포넌트의 자식으로 등록한다.import React from \"react\";import { Navigate, Outlet } from \"react-router-dom\";import { useAuth } from \"../../context/AuthContext\";import Header from \"../layout/Header\";import Nav from \"../layout/Nav\";import Footer from \"../layout/Footer\";export default function ProtectedLayout() { const { isLogin } = useAuth(); // 로그인체크 if (!isLogin()) { // 로그인 화면으로 이동 return &lt;Navigate to=\"/login\" /&gt;; } return ( &lt;&gt; &lt;div className=\"wrap\"&gt; &lt;Header /&gt; &lt;main className=\"main\"&gt; &lt;Nav /&gt; &lt;Outlet /&gt; &lt;/main&gt; &lt;/div&gt; &lt;Footer /&gt; &lt;/&gt; );}그 밖에 화면들/src/pages/LoginPage.jsx로그인화면import React, { useState } from \"react\";import { useAuth } from \"../context/AuthContext\";export default function LoginPage() { const [email, setEmail] = useState(\"\"); const { login } = useAuth(); const onClickLogin = () =&gt; { login({ email, }); }; return ( &lt;div&gt; &lt;h3&gt;로그인화면&lt;/h3&gt; &lt;div&gt; email: &lt;input value={email} onChange={(e) =&gt; setEmail(e.target.value)} /&gt; &lt;button onClick={onClickLogin}&gt;로그인&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; );}/src/pages/MainPage.jsximport React from \"react\";export default function MainPage() { return &lt;div&gt;MainPage&lt;/div&gt;;}/src/pages/error/PageNotFound.jsximport React from \"react\";export default function PageNotFound() { return &lt;div&gt;PageNotFound&lt;/div&gt;;}/router/system.js각 메뉴별로 모듈화import React from \"react\";import AuthManagePage from \"../pages/system/AuthManagePage\";import RootMenuMngPage from \"../pages/system/RootMenuMngPage\";const system = [ { path: \"system/auth\", element: &lt;AuthManagePage /&gt;, }, { path: \"system/menu\", element: &lt;RootMenuMngPage /&gt;, },];export default system;/src/App.jsximport React from \"react\";import \"./App.css\";import { Route, Routes } from \"react-router-dom\";import AuthLayout from \"./components/auth/AuthLayout\";import LoginPage from \"./pages/account/LoginPage\";import MainPage from \"./pages/MainPage\";import ProtectedLayout from \"./components/auth/ProtectedLayout\";import PageNotFound from \"./pages/error/PageNotFound\";import system from \"./router/system\";export default function App() { return ( &lt;Routes&gt; &lt;Route path=\"*\" element={&lt;PageNotFound /&gt;} /&gt; &lt;Route element={&lt;AuthLayout /&gt;}&gt; &lt;Route path=\"/login\" element={&lt;LoginPage /&gt;} /&gt; &lt;Route element={&lt;ProtectedLayout /&gt;}&gt; &lt;Route path=\"/\" element={&lt;MainPage /&gt;} /&gt; {system.map((item) =&gt; ( &lt;Route key={item.path} path={item.path} element={item.element} /&gt; ))} &lt;/Route&gt; &lt;/Route&gt; &lt;/Routes&gt; );}테스트로그인이메일을 입력하고 로그인버튼 클릭로그인 후 메인화면로그인 처리후 Root화면으로 이동Page Not Found출처: https://blog.logrocket.com/complete-guide-authentication-with-react-router-v6" }, { "title": "React.js를 위한 eslint 설정", "url": "/posts/React.js%EB%A5%BC-%EC%9C%84%ED%95%9C-eslint-%EC%84%A4%EC%A0%95/", "categories": "Javascript, React.js", "tags": "React.js, eslint", "date": "2023-01-09 17:55:00 +0900", "snippet": "ESLint 설정이미 react project가 구성이 되어있다는 전제하에 다음 실행# 이전 방식npx eslint --init# 최근 방식npm init @eslint/configHow would you like to use ESLint?eslint를 어떻게 사용할건지(문법체크와 에러확인 용도로만 사용. 코드스타일까지 체크하면 능숙한 사람이라면 모르겠지만 여러 개발자들과 협업시에는 오히려 코드스타일 에러 찾느라 시간이 더 걸린다. 그리고 코드스타일까지 체크할 경우 마지막에 의존성이 몇개가 더 추가된다.)? How would you like to use ESLint? ... To check syntax only # 문법체크만&gt; To check syntax and find problems # 문법체크와 에러 확인 To check syntax, find problems, and enforce code style # 문법체크, 에러확인, 코드 스타일로 체크What type of modules does your project use?Javascript모듈을 어떤 타입으로 쓸건지(import/export)? What type of modules does your project use? ...&gt; JavaScript modules (import/export) CommonJS (require/exports) None of theseWhich framework does your project use?어떤 프레임워크로 쓸건지(React)? Which framework does your project use? ...&gt; React Vue.js None of theseDoes your project use TypeScript?타입스크립트를 쓸건지(난…No)Does your project use TypeScript? » No / YesWhere does your code run?어떤 환경에서 실행될건지(Brower, Node 둘다 체크, Node를 선택하지 않으면 .eslintrc.js에서 module.exports 부분에서 에러로 표시됩니다.)Where does your code run?√ Browser√ NodeWhat format do you want your config file to be in?eslint설정파일을 어떤 포멧으로 저장할지(JavaScript)? What format do you want your config file to be in? ...&gt; JavaScript YAML JSONThe config that you’ve selected requires the following dependencies:설정한 구성으로 다음의 의존성의 요구됩니다. 설치할까요?(Yes)The config that you've selected requires the following dependencies:eslint-plugin-react@latest? Would you like to install them now? » No / YesWhich package manager do you want to use?패키지 매니저로 어떤걸 사용할건지(yarn)? Which package manager do you want to use? ... npm&gt; yarn pnpm생성된 .eslintrc.js파일module.exports = { env: { browser: true, es2021: true, node: true, }, extends: [\"eslint:recommended\", \"plugin:react/recommended\"], overrides: [], parserOptions: { ecmaVersion: \"latest\", sourceType: \"module\", }, plugins: [\"react\"], rules: {},};" }, { "title": "Vue.js Study#2 - Vue익숙해지기", "url": "/posts/vue-study-2/", "categories": "Javascript, Vue.js", "tags": "Vue.js, Vue Study", "date": "2022-06-03 09:00:00 +0900", "snippet": "ES6 문법에 어느정도 익숙해졌다면, 이제 Vue에서 사용되는 몇 가지 기본적인 개념을 이해해야한다.이에 앞서 먼저 내 컴퓨터에 Vue를 설치 해보자.vue 개발환경으로만 검색해도 무수히 많은 블로그들이 나올테니 찾아보면 되겠다.보통, node를 설치하고 vue cli를 설치해서 vue cli를 이용하여 vue project를 생성 하면된다. 현재 vue3가 나왔지만 본 글은 vue2를 기준으로 설명한다. vue3에서는 vue2의 기본적인 개념을 거의 그대로 가져가고 vue3에서의 새로운 개념이 추가되었다고 보면된다.상태(data)이 부분이 기존에 웹어플리케이션 개발과 가장 다른 부분이 아닐까 한다.상태라는 정보는 특정 화면에서만 가질 수도 있고, 전체 애플리케이션에서도 가질 수 있다.상태정보는 일단 화면에서 쓰이는 데이터라고 볼 수 있겠다.예들 들어 어떤 변수 text를 만들어서 문자열을 넣고 그것을 화면에 출력하고 싶다.또한 변수의 문자열을 변경하여 출력하고 싶다.이럴 경우 기존의 웹은 다음과 같이 해야할 것이다.&lt;div id=\"text\"&gt;&lt;/div&gt;&lt;button onClick=\"showText()\"&gt;출력&lt;/button&gt;&lt;button onClick=\"changeText('goob bye')\"&gt;변경&lt;/button&gt;var text = \"hello world\";/** * 텍스트를 출력한다. */function showText() { var textEl = document.getElementById(\"text\"); textEl.innerText = text;}/** * 텍스트를 변경하고 출력한다. * @param changeText 변경할 문자열 */function changeText(changeText) { text = changeText; showText();}vue에서는 text라는 변수를 하나의 상태로 본다. 그리고 다음과 같이 정의를 한다.&lt;script&gt;export default { data() { return { text: \"hello world\", }; },};&lt;/script&gt;그리고 화면에 출력하는 부분은 다음과 같다.&lt;template&gt; &lt;div&gt;{{ text }}&lt;/div&gt;&lt;/template&gt;전체 소스를 보면 다음과 같다.&lt;template&gt; &lt;div&gt;{{ text }}&lt;/div&gt; &lt;button v-on:click=\"changeText('goob bye')\"&gt;변경&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default { data() { return { text: \"hello world\", }; }, methods: { /** * 텍스트를 변경한다. * @param changeText 변경할 문자열 */ changeText(changeText) { this.text = changeText; }, },};&lt;/script&gt;비교를 해보면 문자열을 출력하는 함수인 showText()가 vue쪽 소스에선 빠졌다.이전의 웹처럼 해당 element를 찾고 element의 property를 변경 할 필요가 없다.그냥 text라는 데이터를 출력할 위치에 작성하기만 하면된다.텍스트의 변경도 그렇다. 상태 정보만 변경하면 알아서 변경된 정보가 출력된다. 위 vue 소스를 보면 data, methods 와 같이 export default의 속성으로 사전에 정의를 하게 되어있는데 이를 vue에선 옵션이라고 부른다.vue2는 이런 구조로 명확하게 구분되어 있다보니 가독성도 좋아 보이는데vue3에선 composition api가 나오면서 setup 이라는 옵션을 사용하는데,이 옵션에 data나 method들이 순서없이 정의를 할 수 있다보니 개발자가 가독성 있게 코딩을 해야한다.물론 vue3에서도 data, methods 옵션을 그대로 사용 할 수는 있다." }, { "title": "Vue.js Study#1 - 사전준비", "url": "/posts/vue-study-1/", "categories": "Javascript, Vue.js", "tags": "Vue.js, Vue Study", "date": "2022-06-02 14:59:00 +0900", "snippet": "작년 부터 유독 Vue나 React 프로젝트들이 많이 보이기 시작했다.개인적인 생각으로는 굳이 그런 것들로 할 필요가 없다고 생각이 들긴하지만…jQuery만 봐도 얼마나 훌륭한가…각설하고, 주변 개발자들의 Vue에 대한 열화와 같은 Study 욕구를 해소하기 위해 그동안 몇 번 진행했던 Study의 내용을 간단하게나마 정리해보고자 한다. 이 글은 기존의 웹 개발을 했던 분들을 대상으로 작성해서 어느정도 웹에 대한 이해가 있어야 한다.목표 개발환경 세팅 게시판 만들어 보기SPA란Single Page Application의 약자인데, 단일 페이지? Vue나 React는 SPA Framework라고들 하는데, 이전에 웹을 개발하던 방식과는 패러다임이 다르다.SPA 이전의 개발은 한 페이지를 표시하기 위해 브라우저에서 서버에게 요청을 하면 요청한 페이지에 대한 결과물(HTML)을 서버에서 보내주는 방식이였다.그리고 이런 방식을 SSR1이라고 한다. SPA가 나와서 이런 용어가 있지 SPA 이전의 웹개발 시절엔 들어본적이 없는 용어이다.SPA는 CSR2이라고 하여 클라이언트에서 렌더링을 하는 방식인데 최초 접속시 한번 페이지를 렌더링하기 위한 리소스(html, javascript, css…)를 서버로부터 받는다.그리고 받은 리소스를 가지고 첫 화면을 생성한다. 여기까지는 별 다를게 없어보이는데, 만약 다른 페이지로 이동을 한다면 여기서부터 차이가 난다.기존의 웹은 다른 페이지로 이동할때 서버에게 이동하고자하는 페이지에 대한 결과물을 다시 요청하고 결과물을 받아 화면에 출력한다.이와는 다르게 SPA는 페이지 이동시 서버에 요청을 하지 않는다. 이미 다음 페이지를 렌더링할 리소스를 가지고 있기 때문이다. 단 데이터를 출력하기 위한 요청을 하긴 한다.개인적인 생각이지만, SPA이전의 웹은 페이지를 렌더링하기 위한 요청을 여러번 하기 때문에 SPA와 비교해서 MPA3라고 굳이 이름을 붙인게 아닌가 싶고,SPA는 페이지를 렌더링하기 위한 요청을 한번만 하기 때문에 Single Page 라고 하는게 아닌가 싶다.ES6에 익숙해지기SPA개발을 위해 ES6는 필수다. 꼭 알아야한다.ECMAScript라고 하며 JavaScript와 헷갈릴 수 있는데 ECMAScript는 일종의 스크립트에 대한 표준을 정의한 문서이고, 이 표준을 준수한 언어가 JavaScript라고 보면 될거 같다.여기서 6은 표준 문서가 여섯번째 개정되었음을 말한다.이전에 우리가 많이 사용하던 JavaScript는 ES5 기준이였고, Vue 개발에 필요한 ES6는 많은 함수들이 추가 되었고 문법 자체도 생소한 것들이 많다.ES6에서 내가 자주 쓰는것들 위주로 몇 가지 정리해 보면, 변수선언 var대신 const, let을 사용한다.// 이전의 JavaScriptvar name = \"devobba\";// ES6이후const name = \"devobba\"; // 상수 재할당 Xlet name = \"devobba\"; // 변수 재할당 O 화살표 함수(arrow function) 화살표를 사용한 함수의 표현식// 이전의 JavaScriptfunction plus(a, b) { return a + b;}console.log(plus(5, 6)); // 11var list = [\"apple\", \"banana\", \"orange\"];console.log( list.map(function (item) { return item.length; })); // [5, 6, 5]// ES6이후const plus = (a, b) =&gt; { return a + b;};console.log(plus(5, 6)); // 11const list = [\"apple\", \"banana\", \"orange\"];console.log(list.map((item) =&gt; item.length)); // [5, 6, 5] 매개변수 기본값 설정 함수에 넘기는 매개변수의 값이 ‘’, null, undefined일 경우 기본값을 대신 사용 할 수 있다.const plus = (a, b = 10) =&gt; { return a + b;};console.log(plus(5, 6)); // 11console.log(plus(5)); // 15 Template Literal 문자열 템플릿을 이용하여 표현할 수 있다. java의 String.format() 메소드와 유사하다.// 이전의 JavaScriptvar name = \"devobba\";console.log(\"hi \" + name + \"! nice meet you.\"); // hi devobba! nice meet you.// ES6이후const name = \"devobba\";console.log(`hi ${name}! nice meet you.`); // hi devobba! nice meet you. spread operator 전개 연산자라고 하여 Object나 Array의 항목을 나열한다.const list1 = [\"a\", \"b\", \"c\"];const list2 = [\"d\", \"e\"];const list3 = [...list1, ...list2];console.log(list3); // [\"a\", \"b\", \"c\", \"d\", \"e\"]const devobba = { name: \"devobba\", age: 28 };const devunni = { name: \"devunni\", age: 26, sex: \"woman\" };const devFamily = { ...devobba, ...devunni };console.log(devFamily);/*Ojbect같은 경우는 병합하는 Object의 키가 이미 있을 경우 덮어 씌우게 되어 맨 마지막 인자의 값이최종적으로 남게 된다.{ age: 26, name: \"devunni\", sex: \"woman\"}*/ Destructuring assignment (구조분해할당?) 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 JavaScript 표현식입니다.// Arraylet first, second, other;const [first, second, ...other] = [\"a\", \"b\", \"c\", \"d\", \"e\"];console.log(first); // aconsole.log(second); // bconsole.log(other); // [\"c\", \"d\", \"e\"];// Objectconst userInfo = { name: \"devobba\", age: 28 };const { name } = userInfo;console.log(name); // devobbaconst printAge = ({ age }) =&gt; { console.log(age);};printAge(userInfo); // 28 import, export 다른 js파일에서 작성된 코드를 java처럼 import하여 사용할 수 있다. 단, 다른 js파일에서 export를 해줘야한다. 예제를 보면 그냥 export와 default export의 차이점이 있다.// util.mjsconst plus = (a, b) =&gt; a + b;export const minus = (a, b) =&gt; a - b;export default plus;// main.mjsimport plus, { minus } from \"./util.mjs\";console.log(plus(1, 2)); // 3console.log(minus(2, 1)); // 1// util.mjsexport const plus = (a, b) =&gt; a + b;export const minus = (a, b) =&gt; a - b;// main.mjsimport { plus, minus } from \"./util.mjs\";// orimport * as util from \"./util.mjs\";console.log(util.plus(1, 2));console.log(util.minus(2, 1));그 밖에 자주쓰는 것들 ===, == 둘의 차이는 ===는 type까지 비교한다는것console.log(1 == \"1\"); // trueconsole.log(1 === \"1\"); // false Array.map(callback function) 배열을 for문을 돌려 같은 크기가 같고 다른 형태의 배열을 생성할 수 있다.const list = [\"apple\", \"banana\", \"orange\"];console.log(list.map((item) =&gt; `like ${item}`)); // [\"like apple\", \"like banana\", \"like orange\"]console.log(list.map((item) =&gt; item.length)); // [5, 6, 6]console.log( list.map((item, index) =&gt; { return { name: item, order: index, }; }));/*[{ name: \"apple\", order: 0}, { name: \"banana\", order: 1}, { name: \"orange\", order: 2}]*/ Array.find(callback function), Array.findIndex(callback function) 배열에서 특정 조건의 요소를 찾는다. callback function에서 특정 요소를 찾으면 for문을 중단한다. 찾지 못하면 defined, -1을 반환const list = [1, 2, 3, 1];console.log(list.find((item) =&gt; item === 1)); // 1console.log(list.findIndex((item) =&gt; item === 1)); // 0 변수명을 Object의 Key로 사용 변수명과 Key가 같다면 Key를 생략해도 된다.const name = \"devobba\";const obj = { name }; // =&gt; const obj = { name: name }console.log(obj.name); // devobba nullish operator 널처리를 위한 연산자// case1const name = null;console.log(name ?? \"devobba\"); // devobba// case2const name = \"\";console.log(name ?? \"devobba\"); // ''// case3const name = null;console.log(name || \"devobba\"); // devobba// case4const name = \"\";console.log(name || \"devobba\"); // devobba// case5const a = null;const b = null;const c = \"c\";console.log(a ?? b ?? c ?? \"devobba\"); // c// case6const obj = null;console.log(obj?.name); // undefined// case7const obj = { name: \"devobba\",};console.log(obj?.name); // devobbaPromiseasync/await Vue Study 에서 전체 글을 확인 할 수 있습니다.각주 Server Side Rendering 이라고 하며, 서버측에서 동적인 데이터를 이용하여 html을 만드는 방식으로 jsp, php, asp 등이 있다. &#8617; Client Side Rendering 이라고 하며, 클라이언트(브라우저)에서 html을 만드는 방식이다. &#8617; Multi Page Application &#8617; " }, { "title": "npm debug 와 morgan 같이 쓰기", "url": "/posts/npm-debug-%EC%99%80-morgan-%EA%B0%99%EC%9D%B4-%EC%93%B0%EA%B8%B0/", "categories": "Javascript, Node.js", "tags": "Node.js, debug, morgan", "date": "2022-01-03 16:56:00 +0900", "snippet": "express-generate를 이용하여 프로젝트를 생성하면 debug, morgan이 기본으로 설치되는데,debug는 디버그 로그를 남기기 위한 유틸성 모듈이고, mogran은 사용자의 요청과 응답 사이에서 로그를 남기는 미들웨어로 둘다 로그를 남기고, 포맷이 다르다보니,로그 포맷을 통일해야겠다는 생각이 들었다.const debug = require('debug')('app:server');const logger = require('morgan');...app.use( logger( function (tokens, req, res) { const method = tokens.method(req, res); return [ `[${method}]`, tokens.url(req, res), tokens.status(req, res), '-', tokens['response-time'](req, res), 'ms', !isEmpty(req.body) ? JSON.stringify(req.body) : null ].join(' '); }, { stream: { write: msg =&gt; debug(msg) } } // morgan의 로그를 debug로 쓰겠다는 설정 ));morgan은 이미 정의된 포맷으로 지정을 할 수도 있지만 위 소스 처럼 커스텀하게 바꿀수도 있다.https://expressjs.com/en/resources/middleware/morgan.html" }, { "title": "isEmpty Sample", "url": "/posts/isEmpty/", "categories": "Javascript", "tags": "Javascript isEmpty", "date": "2022-01-03 16:25:00 +0900", "snippet": "const isEmpty = val =&gt; { if (val === undefined) return true; if ( typeof val == 'function' || typeof val == 'number' || typeof val == 'boolean' || Object.prototype.toString.call(val) === '[object Date]' ) { return false; } // null or 0 length array if (val == null || val.length === 0) { return true; } if (typeof val == 'object') { // empty object let r = true; for (const f in val) { r = false; } return r; } return false;};​console.log(isEmpty()); // trueconsole.log(isEmpty(null)); // trueconsole.log(isEmpty(undefined)); // trueconsole.log(isEmpty('')); // trueconsole.log(isEmpty({})); // trueconsole.log(isEmpty([])); // true" }, { "title": "Multi port 구성", "url": "/posts/Multi-port-%EA%B5%AC%EC%84%B1/", "categories": "Javascript, Node.js", "tags": "Node.js, multi port", "date": "2022-01-03 14:12:00 +0900", "snippet": "배경 채팅서버와 일반적인 rest api 서버를 구축해야하는데 node서버 하나로 구성을 하고 싶다. express-generator를 이용하여 프로젝트를 생성한 상태구현/app.jsconst express = require(\"express\");const app = express();const chatApp = express();/* 생략 */module.exports = { app, chatApp,};/bin/wwwconst { app, chatApp } = require(\"../app\");const debug = require(\"debug\")(\"server\");const http = require(\"http\");//#region web server 설정const port = normalizePort(process.env.PORT || \"3000\");app.set(\"port\", port);const server = http.createServer(app);server.listen(port);server.on(\"error\", onError);server.on(\"listening\", () =&gt; { const addr = server.address(); const bind = typeof addr === \"string\" ? \"pipe \" + addr : \"port \" + addr.port; debug(\"Api Server Listening on \" + bind);});//#endregion//#region chatting server 설정const chatPort = normalizePort(process.env.PORT || \"3100\");chatApp.set(\"port\", chatPort);const chatServer = http.createServer(chatApp);const io = require(\"socket.io\")(chatServer, { cors: { origin: \"http://localhost:3000\", methods: [\"GET\", \"POST\"], },});io.on(\"connection\", (socket) =&gt; { console.log(\"connection\"); socket.on(\"init\", (payload) =&gt; { console.log(payload); });});chatServer.listen(chatPort);chatServer.on(\"error\", onError);chatServer.on(\"listening\", () =&gt; { const addr = chatServer.address(); const bind = typeof addr === \"string\" ? \"pipe \" + addr : \"port \" + addr.port; debug(\"Chat Server Listening on \" + bind);});//#endregion/package.json{ \"scripts\": { \"start\": \"set DEBUG=* &amp; node ./bin/www\" }, \"dependencies\": { \"cookie-parser\": \"~1.4.4\", \"debug\": \"~2.6.9\", \"express\": \"~4.16.1\", \"http-errors\": \"~1.6.3\", \"jade\": \"~1.11.0\", \"morgan\": \"~1.9.1\", \"socket.io\": \"^4.4.0\" }}실행npm run start3000번과 3001번 포트로 각각 서버가 띄워졌다." }, { "title": "Mybatis 설정 및 Oracle 연동", "url": "/posts/Mybatis-%EC%84%A4%EC%A0%95-%EB%B0%8F-Oracle-%EC%97%B0%EB%8F%99/", "categories": "Java, Spring Boot", "tags": "Spring Boot, Mybatis Oracle", "date": "2021-12-28 17:29:00 +0900", "snippet": "목표 Oracle DB 연결하여 SELECT 쿼리 실행 SELECT시 resultMap 사용하지 않고, resultType에 POJO Class로 받기. 기타 mybatis 설정 적용해보기.환경 Intellij Community Spring Boot 2.6.2 MavenDB Table생성CREATE TABLE T_BOARD( TEST_SEQ INT NOT NULL, -- 일련번호 TEST_SUBJECT VARCHAR2(200) NULL, -- 제목 TEST_CONTENT VARCHAR2(512) NULL, -- 내용 TEST_REG_TIME TIMESTAMP NULL, -- 등록시간 PRIMARY KEY (TEST_SEQ))Dependency추가&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.2.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt; &lt;artifactId&gt;ojdbc8&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;Maven을 reload하게 되면 Lombok관련해서 활성화여부를 묻는다.Enable 클릭DB 접속정보 및 Mybatis 설정이 상태에서 실행을 하게되면 다음과 같은 에러가 뜨면서 서버가 실행되지 않는다.***************************APPLICATION FAILED TO START***************************Description:Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.Reason: Failed to determine a suitable driver classAction:Consider the following:\tIf you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\tIf you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).Process finished with exit code 1datasource를 구성하기 위한 설정을 해야한다.src/main/resources/application.properties# Oracle DataSourcespring.datasource.driver-class-name=oracle.jdbc.OracleDriverspring.datasource.url=jdbc:oracle:thin:@xxx.xxx.xxx.xxx:1521/xespring.datasource.username=xxxspring.datasource.password=xxx# Mybatismybatis.type-aliases-package=com.example.demo.modelmybatis.mapper-locations=classpath:mapper/*.xmlmybatis.configuration.map-underscore-to-camel-case=true mybatis.type-aliases-package mybatis에서 사용하는 type들(paramterType, resultType)의 package명의 prefix를 미리 정의하는 설정이다. 이 같은 설정을 하면 mapper.xml 파일에서 type에 class name만 기술하면된다. mybatis.mapper-locations mapper xml들을 scan하기 위한 패턴 mybatis.configuration.map-underscore-to-camel-case DB Table Column이 보통 언더바(snake) 표기법으로 되어 있는것을 이전에는 resultMap을 선언해서 Java의 변수와 매핑을 해줬는데, 이를 자동으로 카멜 표기법으로 변환하여 매핑을 해주는 아주 편리한 설정이다.Model작성src/main/java/com/example/demo/model/Board.javapackage com.example.demo.model;import lombok.Data;import java.util.Date;@Datapublic class Board { /** * 일련번호 */ private Integer testSeq; /** * 제목 */ private String testSubject; /** * 내용 */ private String testContent; /** * 등록시간 */ private Date testRegTime;}Mapper작성src/main/java/com/example/demo/mapper/BoardMapper.javapackage com.example.demo.mapper;import com.example.demo.model.Board;import org.apache.ibatis.annotations.Mapper;import java.util.List;@Mapperpublic interface BoardMapper { /** * 게시판 목록 조회 * @return */ List&lt;Board&gt; selectList();}src/main/resources/mapper/boardMapper.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTO Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.example.demo.mapper.BoardMapper\"&gt; &lt;!-- 게시판 목록 조회 --&gt; &lt;select id=\"selectList\" resultType=\"Board\"&gt; SELECT TEST_SEQ , TEST_SUBJECT , TEST_CONTENT , TEST_REG_TIME FROM T_BOARD &lt;/select&gt;&lt;/mapper&gt;Controller작성src/main/java/com/example/demo/DemoController.javapackage com.example.demo;import com.example.demo.mapper.BoardMapper;import com.example.demo.model.Board;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;@RestControllerpublic class DemoController { @Autowired private BoardMapper boardMapper; @GetMapping(\"/board/list\") public List&lt;Board&gt; getBoardList() { return boardMapper.selectList(); }}테스트Model Class의 각 변수에 잘 담아서 출력되는것을 확인" }, { "title": "Intellij Community로 Spring Boot 프로젝트 생성", "url": "/posts/Intellij-Community%EB%A1%9C-Spring-Boot-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1/", "categories": "Java, Spring Boot", "tags": "Intellij Community, Spring Boot", "date": "2021-12-28 15:25:00 +0900", "snippet": "목표 Intellij Community(무료버전)를 이용하여 Spring Boot 프로젝트를 생성한다. Maven으로 빌드한다. 샘플 컨트롤러를 작성하여 웹에서 확인한다.환경 Intellij Community 빌드방식: Maven Spring Boot 배포방식: JarIntellij Community는 Spring을 지원하지 않는다고 되어있는데, Spring 프로젝트를 생성 할 수만 없을 뿐 이미 만들어진 Spring 프로젝트는 실행 및 개발이 가능하다.그래서 다음의 사이트에서 Spring 프로젝트를 생성하여 다운받은 프로젝트를 Intellij에서 열면 무료 버전에서도 Spring Boot Framework를 사용할 수 있다.https://start.spring.io위와 같이 설정하고 우측 상단의 ADD DEPENDENCIES 버튼을 클릭.web을 입력하여 검색된 목록 중 Spring Web을 선택GENERATE 버튼을 클릭하면 zip파일로 다운로드 된다. 만약 Spring Web에 Tomcat이 포함되어있어서, 없을 경우 Intellij에서 실행을 할 수 없다.Intellij 실행압축을 푼 폴더를 선택Trust Project 클릭프로젝트가 열리면 DemoApplication.java파일을 열고 자동 빌드가 끝나면 플레이(?) 아이콘이 표시되는데 클릭한다.Run… 선택브라우저에서 확인컨트롤러를 등록한게 없어서 404에러가 남/src/main/java/com.example.demo/DemoController.javapackage com.example.demo;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class DemoController { @GetMapping(\"/hello\") public String hello(@RequestParam(value = \"name\", defaultValue = \"World\") String name) { return String.format(\"Hello %s!\", name); }}위와 같이 컨트롤러를 작성하고, 브라우저에서 확인" }, { "title": "공통 Modal Alert창(redux)", "url": "/posts/%EA%B3%B5%ED%86%B5-Modal-Alert%EC%B0%BD(redux)/", "categories": "Javascript, React.js", "tags": "React.js, 공통 modal", "date": "2021-12-22 18:52:00 +0900", "snippet": "환경 npm i react-bootstrap bootstrap@5.1.3 npm i redux react-reduxaction type 정의/actions/types.js/** * 모달창 띄우기 */export const SHOW_ALERT_MODAL = \"SHOW_ALERT_MODAL\";/** * 모달창 닫기 */export const HIDE_ALERT_MODAL = \"HIDE_ALERT_MODAL\";reducer 작성/reducers/alertModal.jsimport { SHOW_ALERT_MODAL, HIDE_ALERT_MODAL } from \"../actions/types\";const alertModal = ( state = { show: false, text: null, callback: null, }, action) =&gt; { const { type, payload } = action; switch (type) { case SHOW_ALERT_MODAL: return { show: true, text: payload.text, callback: payload.callback, }; case HIDE_ALERT_MODAL: return { show: false, text: null, callback: null, }; default: return state; }};export default alertModal;reducer 등록/reducers/index.jsimport { combineReducers } from \"redux\";import alertModal from \"./alertModal\";export default combineReducers({ alertModal,});/index.jsimport React from \"react\";import ReactDOM from \"react-dom\";import \"./index.css\";import App from \"./App\";import reportWebVitals from \"./reportWebVitals\";import { createStore } from \"redux\";import { Provider } from \"react-redux\";import rootReducer from \"./reducers\";const store = createStore(rootReducer);ReactDOM.render( &lt;React.StrictMode&gt; &lt;Provider store={store}&gt; &lt;App /&gt; &lt;/Provider&gt; &lt;/React.StrictMode&gt;, document.getElementById(\"root\"));reportWebVitals();action 작성/actions/alertModal.jsimport { SHOW_ALERT_MODAL, HIDE_ALERT_MODAL } from \"./types\";export const showAlertModal = (text, callback) =&gt; { return { type: SHOW_ALERT_MODAL, payload: { show: true, text, callback, }, };};export const hideAlertModal = () =&gt; { return { type: HIDE_ALERT_MODAL, };};Modal창 작성/components/common/AlertModal.jsimport React from \"react\";import { Button, Modal } from \"react-bootstrap\";import { useDispatch } from \"react-redux\";import { hideAlertModal } from \"../../actions/alertModal\";const AlertModal = ({ text, show, callback }) =&gt; { const dispatch = useDispatch(); const handleClose = () =&gt; { dispatch(hideAlertModal()); }; return ( &lt;Modal show={show} onHide={handleClose}&gt; &lt;Modal.Header closeButton&gt; &lt;Modal.Title&gt;확인&lt;/Modal.Title&gt; &lt;/Modal.Header&gt; &lt;Modal.Body&gt;{text}&lt;/Modal.Body&gt; &lt;Modal.Footer&gt; &lt;Button variant=\"primary\" onClick={() =&gt; { handleClose(); if (callback &amp;&amp; typeof callback === \"function\") { callback(); } }} &gt; 확인 &lt;/Button&gt; &lt;/Modal.Footer&gt; &lt;/Modal&gt; );};export default AlertModal;Modal창 등록/App.jsimport \"./App.css\";import \"bootstrap/dist/css/bootstrap.min.css\";import Routes from \"./components/screen/Routes\";import AlertModal from \"./components/common/AlertModal\";import { useSelector } from \"react-redux\";function App() { const alertModal = useSelector((state) =&gt; state.alertModal); return ( &lt;div className=\"App\"&gt; &lt;Routes /&gt; &lt;AlertModal text={alertModal.text} show={alertModal.show} callback={alertModal.callback} /&gt; &lt;/div&gt; );}export default App;화면에서 사용/components/screen/Page1.jsimport { Container } from \"react-bootstrap\";import { Button } from \"react-bootstrap\";import { useDispatch } from \"react-redux\";import { showAlertModal } from \"../../actions/alertModal\";export default function Page1() { const dispatch = useDispatch(); const callback = () =&gt; { alert(\"callback\"); }; const onClickButton = () =&gt; { dispatch(showAlertModal(\"하이\", callback)); }; return ( &lt;Container&gt; &lt;h5&gt;Page1&lt;/h5&gt; &lt;Button variant=\"primary\" onClick={onClickButton}&gt; 모달 &lt;/Button&gt; &lt;/Container&gt; );}화면에서의 호출은 dispatch(showAlertModal(‘문자열’, 콜백함수)); 형태로 호출하면 된다.콜백함수는 확인 버튼 클릭 후 어떤 로직을 수행할 경우에 사용하면 된다.실행화면" }, { "title": "빈 배열 만들기", "url": "/posts/%EB%B9%88%EB%B0%B0%EC%97%B4%EB%A7%8C%EB%93%A4%EA%B8%B0/", "categories": "Javascript", "tags": "배열", "date": "2021-12-16 13:01:00 +0900", "snippet": "// 빈배열 만들기const emptyArray1 = Array.from({ length: 3 });console.log(emptyArray1); // [undefined, undefined, undefined]// 빈배열 만들고 채우기1const emptyArray2 = Array.from({ length: 3 }).map((item, index) =&gt; index);console.log(emptyArray2); // [0, 1, 2]// 빈배열 만들고 채우기2const emptyArray3 = Array.from({ length: 3 }, (item, index) =&gt; index);console.log(emptyArray3); // [0, 1, 2]" }, { "title": "(link) Throttle 와 Debounce 개념 정리하기", "url": "/posts/Throttle-%EC%99%80-Debounce-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/", "categories": "Javascript", "tags": "Throttle, Debounce", "date": "2021-12-08 13:01:00 +0900", "snippet": "Throttle 와 Debounce 개념 정리하기Debounce 와 Throttle 리액트로 구현하기" }, { "title": "React.js, Spring Boot 환경에서 이미지 업로드", "url": "/posts/React.js,-Spring-Boot-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%97%85%EB%A1%9C%EB%93%9C/", "categories": "Java, Spring Boot", "tags": "React.js, Image Upload, Spring Boot", "date": "2021-12-07 15:25:00 +0900", "snippet": "구성 Front End(React.js) Back End(Spring Boot) Image Server(API)시나리오 Front에서 파일을 선택하여 Form Data를 Back End에 전송 Back End에서 파일을 받아서 RestTemplate을 이용하여 binary 데이터 형태로 Image Server에 전송FrontEnd(React.js)import React, { useState } from \"react\";import axios from \"axios\";const Front = () =&gt; { const [file, setFile] = useState(null); /** * 파일변경감지 */ const onChangeFile = (e) =&gt; { if (e.target.files &amp;&amp; e.target.files.length &gt; 0) { setFile(e.target.files[0]); } }; /** * 파일업로드 */ const onClickUpload = async () =&gt; { const formData = new FormData(); formData.append(\"param1\", \"파일외넘길값1\"); formData.append(\"param2\", \"파일외넘길값2\"); formData.append(\"file\", file); const response = await axios.post(\"back end url\", { headers: { \"Content-Type\": \"multipart/form-data\", }, }); console.log(response); }; return ( &lt;div&gt; &lt;input type=\"file\" onChange={onChangeFile} /&gt; &lt;button onClick={onClickUpload}&gt;업로드&lt;/button&gt; &lt;/div&gt; );};BackEnd(Spring)package com.test.controller;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import org.apache.commons.httpclient.HttpStatus;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestTemplate;import org.springframework.web.multipart.MultipartFile;import com.test.common.ApiResponse;@RestControllerpublic class UploadController { /** * &lt;pre&gt; * 이미지 업로드 * 업로드된 파일을 다시 API 서버로 전송한다 * &lt;/pre&gt; * @param param1 파일외넘길변수1 * @param param2 파일외넘길변수2 * @param multipartFile 파일 */ @PostMapping(\"/uploadImage\") public ApiResponse uploadImage( @RequestParam(\"param1\") String param1, @RequestParam(\"param2\") String param2, @RequestParam(\"file\") MultipartFile multipartFile) { String fileName = \"파일명생성\"; HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.MULTIPART_FORM_DATA); try { HttpEntity&lt;byte[]&gt; entity = new HttpEntity&lt;&gt;(multipartFile.getBytes(), headers); RestTemplate restTemplate = new RestTemplate(); // 이미지 전송 ResponseEntity&lt;String&gt; responseEntity = restTemplate.postForEntity(\"API 서버 주소\", entity, String.class); if (responseEntity.getStatusCodeValue() == HttpStatus.SC_OK) { new ApiResponse(\"0000\", \"success\"); } else { throw new Exception(\"image upload fail\"); } } catch (Exception e) { return new ApiResponse(\"9999\", e.getMessage()); } }}" }, { "title": "이미지 데이터(base64)를 파일로 컨버팅", "url": "/posts/%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%8D%B0%EC%9D%B4%ED%84%B0(base64)%EB%A5%BC-%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EC%BB%A8%EB%B2%84%ED%8C%85/", "categories": "Javascript", "tags": "base64", "date": "2021-12-07 13:01:00 +0900", "snippet": "/** * 이미지 데이터를 파일로 컨버팅 * @param {String} data 이미지데이터 * @param {String} imageUrl 이미지 전체 주소 * @returns File객체 */const dataURLtoFile = (data, imageUrl) =&gt; { const filename = imageUrl.substring(imageUrl.lastIndexOf(\"/\") + 1); const arr = data.split(\",\"); const mime = arr[0].match(/:(.*?);/)[1]; const bstr = atob(arr[1]); let n = bstr.length; const u8arr = new Uint8Array(n); while (n) { u8arr[n - 1] = bstr.charCodeAt(n - 1); n -= 1; // to make eslint happy } return new File([u8arr], filename, { type: mime });};" }, { "title": "Bootstrap Modal창 바깥영역 클릭시 닫히지 않게 하기", "url": "/posts/Bootstrap-Modal%EC%B0%BD-%EB%B0%94%EA%B9%A5%EC%98%81%EC%97%AD-%ED%81%B4%EB%A6%AD%EC%8B%9C-%EB%8B%AB%ED%9E%88%EC%A7%80-%EC%95%8A%EA%B2%8C-%ED%95%98%EA%B8%B0/", "categories": "Javascript, Vue.js", "tags": "Vue.js", "date": "2021-11-18 09:00:00 +0900", "snippet": "환경 Vue.js npm: bootstrap-vueBootstrap의 컴포넌트인 모달은 기본적으로 모달하게 창을 띄워주지 않는다.그래서 모달창의 바깥쪽을 클릭하면 모달창이 닫혀버리는데이를 방지하게 위해 다음과 같은 속성(no-close-on-backdrop)을 준다.&lt;b-modal id=\"modal\" :no-close-on-backdrop=\"true\"&gt;...&lt;/b-modal&gt;default값은 false로 해당값을 true로 주면 바깥쪽을 클릭해도 창이 닫히지 않는다.참고: https://bootstrap-vue.org/docs/components/modal" }, { "title": "vuex 설명", "url": "/posts/vuex-%EC%84%A4%EB%AA%85/", "categories": "Javascript, Vue.js", "tags": "vuex", "date": "2021-11-10 15:25:00 +0900", "snippet": "잘되어있음…이것만 봐도 되겠음…https://webruden.tistory.com/340" }, { "title": "vue-router3 사용", "url": "/posts/vue-router3-%EC%82%AC%EC%9A%A9/", "categories": "Javascript, Vue.js", "tags": "vue-router3", "date": "2021-11-10 15:25:00 +0900", "snippet": "설치npm install vue-router@3 vue-router 4가 나와서 이전 3와 설정방법이 다르다. 해당글은 vue-router 3를 사용한다.게시판 화면 생성&lt;!-- ./components/board/List.vue --&gt;&lt;template&gt; &lt;div&gt;게시판목록&lt;/div&gt;&lt;/template&gt;&lt;!-- ./components/board/Form.vue --&gt;&lt;template&gt; &lt;div&gt;게시판폼&lt;/div&gt;&lt;/template&gt;&lt;!-- ./components/board/View.vue --&gt;&lt;template&gt; &lt;div&gt;게시판상세&lt;/div&gt;&lt;/template&gt;설정(일반적인 방법)./routers/index.jsimport Vue from 'vue';import VueRouter from 'vue-router';Vue.use(VueRouter);const routes = [ { path: '/board/list' component: () =&gt; import('./components/board/List') }, { path: '/board/form' component: () =&gt; import('./components/board/Form') }, { path: '/board/:id' component: () =&gt; import('./components/board/View') },];export default new VueRouter({ scrollBehavior() { return { x: 0, y: 0 }; }, mode: 'history', routes});설정(도메인별로 모듈화)./routers/board.jsexport default [ { path: \"/board/list\", component: () =&gt; import(\"../components/board/List\"), }, { path: \"/board/form\", component: () =&gt; import(\"../components/board/Form\"), }, { path: \"/board/:id\", component: () =&gt; import(\"../components/board/View\"), },];./routers/index.jsimport Vue from \"vue\";import VueRouter from \"vue-router\";import board from \"./board\";Vue.use(VueRouter);const routes = [...board];export default new VueRouter({ /** * 라우팅 후 이전화면의 스크롤 위치가 그대로 유지되는데 이를 최상단으로 올려준다. */ scrollBehavior() { return { x: 0, y: 0 }; }, mode: \"history\", routes,});설정(모듈별 중첩)./routers/board.jsexport default [ { path: \"/board\", component: () =&gt; import(\"../components/Blank\"), children: [ { path: \"list\", component: () =&gt; import(\"../components/board/List\"), }, { path: \"form\", component: () =&gt; import(\"../components/board/Form\"), }, { path: \":id\", component: () =&gt; import(\"../components/board/View\"), }, ], },];중첩된 라우팅을 사용할 경우엔 부모가 되는 path가 /board가 되는 부분에 &lt;router-view /&gt;가 포함된 부모 컴포넌트가있어야한다. 위 코드에는 Blank.vue를 하나 만들어뒀다../components/Blank.vue&lt;template&gt; &lt;router-view /&gt;&lt;/template&gt;라우터 등록./main.jsimport Vue from \"vue\";import App from \"./App.vue\";import router from \"./routers\";Vue.config.productionTip = false;new Vue({ router, render: (h) =&gt; h(App),}).$mount(\"#app\");" }, { "title": "Prettier 옵션", "url": "/posts/Prettier-%EC%98%B5%EC%85%98/", "categories": "Tool", "tags": "prettier", "date": "2021-11-09 15:25:00 +0900", "snippet": ".prettierrc.jsmodule.exports = { arrowParens: \"avoid\", // 화살표 함수에서 인자가 하나일 경우 괄호를 쓸지여부 endOfLine: \"auto\", // 파일 마지막 라인에 줄바꿈 처리 방법 printWidth: 80, // 포맷팅시 줄바꿈할 길이 지정 singleQuote: true, // single 쿼테이션 사용 여부 trailingComma: \"none\", // 콤마로 구분된 구문에서 마지막에 콤마를 넣을지 여부};자세한 옵션은 다음에서 확인https://prettier.io/docs/en/options.html많은 옵션들이 있는데 대부분 기본 설정을 따르고 몇가지만 손대는게 좋지 않을지…" }, { "title": "vscode 오프라인에서 플러그인 설치", "url": "/posts/vscode-%EC%98%A4%ED%94%84%EB%9D%BC%EC%9D%B8%EC%97%90%EC%84%9C-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98/", "categories": "Tool", "tags": "vscode, offline, plugin", "date": "2021-11-08 15:25:00 +0900", "snippet": "인터넷이 되는 PC에서 플러그인 파일을 다운로드 하여 설치하는 방법플러그인 파일은 vsix라는 확장자로 다음 사이트의 Visual Studio Code 카테고리에서 검색하여 다운로드 가능함.https://marketplace.visualstudio.com/ VS Code 실행 후 Ctrl + Shift + P install from VSIX 입력 후 선택 다운로드 한 vsix 파일 선택" }, { "title": "Vue.js - util 파일 모듈화", "url": "/posts/util-%ED%8C%8C%EC%9D%BC-%EB%AA%A8%EB%93%88%ED%99%94/", "categories": "Javascript, Vue.js", "tags": "Vue.js", "date": "2021-11-05 15:25:00 +0900", "snippet": "util.jsexport default { install(Vue) { Vue.prototype.$empty = val =&gt; { if (val === null || val === undefined) return true; if (typeof === 'string' &amp;&amp; val.trim() === '') return true; if (Array.isArray(val) &amp;&amp; val.length &lt; 0) return true; if (typeof val === 'object' &amp;&amp; val.constructor.name === 'Object' &amp;&amp; Object.keys(val).length &lt; 1 &amp;&amp; Object.getOwnPropertyNames(val) &lt; 1) return true; if (typeof val === 'object' &amp;&amp; val.constructor.name === 'String' &amp;&amp; Object.keys(val).length &lt; 1) return true; return false; }; Vue.prototype.$other = () =&gt; { ... } }}main.jsimport Vue from 'vue';...import util from './util.js';Vue.use(util);...사용방법&lt;template&gt; &lt;div&gt; \t&lt;input type=\"text\" v-model=\"text\" /&gt; &lt;!-- 템플릿에서 사용예 --&gt; &lt;span v-if=\"$empty(text)\"&gt;있음&lt;/span&gt; &lt;button @click=\"test()\"&gt;테스트&lt;/button&gt; &lt;/div&gt;&lt;template&gt;&lt;sciprt&gt;export default { data() { return { text: '' } }, methods: { /** * 스크립트에서 사용예 */ \ttest() { if (this.$empty(this.text)) { alert('없음'); } else { alert('있음'); } } }}&lt;/script&gt;" }, { "title": "PDF Viewer Sample", "url": "/posts/PDF-Viewer-Sample/", "categories": "Javascript, Vue.js", "tags": "Vue.js, PDF Viewer", "date": "2021-07-08 17:56:00 +0900", "snippet": "환경 backend: Spring Boot frontend: Vue.js library: vue-pdf-appSpring Boot 설정로컬환경에서 돌리면 문제될게 없겠지만, 실제로 운영은 보통 frontend와 backend는 각기 다른 서버로 구성이 되므로 CORS(Cross-Origin Resource Sharing)설정을 해야한다.그래서 Spring에서 다음과 같이 설정을 한다.WebConfig.javapackage com.sample.config;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.CorsRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configurationpublic class WebConfig implements WebMvcConfigurer { @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(\"/**\") .allowedOrigins(\"*\") .allowedHeaders(\"*\"); }}특정 서버만 접근을 허용한다면 allowedOrigins(“http://sample.com”)과 같이 될것이다.PDF다운로드시 제일 중요한게 allowedHeaders 메소드를 이용하여 모든 header정보를 허용해줘야한다.보통의 applicationi/json형태의 데이터를 요청하면 allowedHeaders가 필요없지만, PDF같은(application/pdf) 파일을 다운로드 할 경우에만 해줘야한다.Spring Boot의 서비스 포트를 9999로 변경(Vue.js의 포트와 겹쳐서…)application.propertiesserver.port = 9999PDFController.javapackage com.sample.controller;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import javax.servlet.ServletContext;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.io.InputStreamResource;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;@Controllerpublic class PDFController { @Autowired private ServletContext servletContext; /** * PDF파일 다운로드 샘플 * @param fileName 파일명 * @return * @throws FileNotFoundException */ @GetMapping(path = \"/sample/pdf\", produces = MediaType.APPLICATION_PDF_VALUE) public ResponseEntity&lt;InputStreamResource&gt; samplePdf(@RequestParam(\"fileName\") String fileName) throws FileNotFoundException { String mineType = servletContext.getMimeType(fileName); MediaType mediaType = null; try { mediaType = MediaType.parseMediaType(mineType); } catch (Exception e) { mediaType = MediaType.APPLICATION_OCTET_STREAM; } File file = new File(\"C:\\\\vue-workspace\\\\sample\\\\public\\\\\" + fileName); InputStreamResource resource = new InputStreamResource(new FileInputStream(file)); return ResponseEntity.ok() .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment;filename=\" + file.getName()) .contentType(mediaType) .contentLength(file.length()) .body(resource); }}Postman또는 인터넷 브라우져에서 다음의 주소로 정상적으로 PDF파일을 다운로드 받는지 확인.http://localhost:9999/sample/pdf?fileName=sample.pdfnpm 추가npm i vue-pdf-apphttps://www.npmjs.com/package/vue-pdf-appVue.js 화면소스&lt;template&gt; &lt;div style=\"height: 98vh\"&gt; &lt;vue-pdf-app :pdf=\"pdfsrc\"&gt;&lt;/vue-pdf-app&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import VuePdfApp from \"vue-pdf-app\";import axios from \"axios\";export default { components: { VuePdfApp, }, data() { return { pdfsrc: null, }; }, created() { this.loadByAxios(); }, methods: { /** * axios 사용 */ async loadByAxios() { try { const response = await axios.get(\"http://localhost:9999/sample/pdf\", { responseType: \"blob\", params: { fileName: \"sample.pdf\", }, }); const blob = new Blob([response.data]); const objectUrl = URL.createObjectURL(blob); this.pdfsrc = objectUrl; } catch (e) { console.error(e); } }, /** * fetch 사용 */ async load() { fetch(\"http://localhost:9999/sample/pdf?fileName=sample.pdf\") .then((response) =&gt; response.blob()) .then((blob) =&gt; { const objectUrl = URL.createObjectURL(blob); this.pdfsrc = objectUrl; }); }, },};&lt;/script&gt; 여기서 눈여겨 보아야할 부분은 첫번째로 pdf가 보여지는 영역의 부모 element의 높이를 반드시 지정을 해야한다.두번째는 서버로부터 받은 데이터를 적절하게 blob으로 형태로 변환하는 부분인데, 위의 소스에는 fetch를 이용한 방법과 axios를 이용한 방법 두가지를 첨부해놨다. 적절한 것을 갖다 쓰면 될 거 같다." }, { "title": "공통 Modal 만들기(with bootstrap)", "url": "/posts/%EA%B3%B5%ED%86%B5-Modal-%EB%A7%8C%EB%93%A4%EA%B8%B0(with-bootstrap)/", "categories": "Javascript, Vue.js", "tags": "Vue.js, Modal", "date": "2021-06-25 18:04:00 +0900", "snippet": "방법 $on을 사용하여 전역으로 이벤트를 등록 모든 화면에서 $emit으로 이벤트 triggerModal 생성ModalAlert.vue&lt;template&gt; &lt;b-modal :id=\"id\" :title=\"title\" @shown=\"init()\" @hide=\"clear()\"&gt; &lt;p&gt;&lt;/p&gt; &lt;template #modal-footer&gt; &lt;div class=\"btn-wrap\"&gt; &lt;button type=\"button\" class=\"btn\" @click=\"confirm\"&lt;/button&gt; &lt;/div&gt; &lt;/template&gt; &lt;/b-modal&gt;&lt;/template&gt;&lt;script&gt;export default { props: { id: { type: String, default: 'modal-alert' }, title: { type: String, default: '알림' }, message: String, buttonName: { type: String, default: '확인' } }, methods: { confirm() { this.$bvModal.hide(this.id); // bootstrap modal hide this.$emit('click-confirm'); // 확인 버튼 클릭 후 이벤트 처리 } }}&lt;/script&gt;이벤트 등록App.vue&lt;template&gt; ... &lt;modal-alert id=\"modal-alert\" :message=\"message\" @click-confirm=\"callback\" /&gt;&lt;/template&gt;&lt;script&gt;import ModalAlert from \"./ModalAlert\";export default { components: { ModalAlert }, data() { return { title: null, message: null, }; }, created() { // 이벤트 등록 this.$root.$on(\"showModalAlert\", (title, message, callback) =&gt; { if (title) { this.title = title; } if (message) { this.message = message; } if (callback) { this.callback = callback; } else { this.callback = () =&gt; {}; } this.$bvModal.show(\"modal-alert\"); }); }, destroyed() { this.$root.$off(\"showModalAlert\"); }, methods: { /** * dummy callback function */ callback() {}, },};&lt;/script&gt;사용&lt;script&gt;export default { methods: { /** * 단순 메세지 */ test1() { this.$root.$emit(\"showModalAlert\", \"알림\", \"단순메세지\"); }, /** * 확인 클릭시 콜백함수 처리 */ test2() { this.$root.$emit( \"showModalAlert\", \"알림\", \"확인 클릭시 콜백함수 처리\", () =&gt; { alert(\"확인버튼 클릭\"); } ); }, },};&lt;/script&gt;" }, { "title": "window.open으로 팝업 띄우기(Vue2)", "url": "/posts/window.open%EC%9C%BC%EB%A1%9C-%ED%8C%9D%EC%97%85-%EB%9D%84%EC%9A%B0%EA%B8%B0/", "categories": "Javascript, Vue.js", "tags": "Vue.js, Vue.js window.open", "date": "2021-06-25 18:04:00 +0900", "snippet": "본래 Vue.js에서 window.open을 사용하는 건 SPA의 사상에 위배될 수도 있지만, 고객의 요청으로 부득이하게 새 창으로 화면을 구현해야 할 때가 있다.stackoverflow에서 찾은 방법인데 일단 빈 화면을 띄우고, 보여줘야 할 내용을 빈 팝업에다 복사하는 방법이다.문제는 크롬에서는 잘 동작을 하는데, IE 11에서는 에러가 난다. 만약 크롬에서만 보여줘도 문제가 없다면 해볼 만한 방법이다.Parent.vue&lt;template&gt; &lt;div&gt; &lt;popup v-model=\"open\"&gt;팝업창의 내용입니다.&lt;/popup&gt; &lt;button @click=\"open = true\"&gt;open&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Popup from \"./Popup.vue\";export default { components: { Popup }, data() { return { open: false, }; },};&lt;/script&gt;Popup.vue&lt;template&gt; &lt;div v-if=\"open\"&gt; &lt;slot /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;function copyStyles(sourceDoc, targetDoc) { Array.from(sourceDoc.styleSheets).forEach((styleSheet) =&gt; { if (styleSheet.cssRules) { const newStyleEl = sourceDoc.createElement(\"style\"); Array.from(styleSheet.cssRules).forEach((cssRule) =&gt; { newStyleEl.appendChild(sourceDoc.createTextNode(cssRule.cssText)); }); targetDoc.head.appendChild(newStyleEl); } else if (styleSheet.href) { const newLinkEl = sourceDoc.createElement(\"link\"); newLinkEl.rel = \"stylesheet\"; newLinkEl.href = styleSheet.href; targetDoc.head.appendChild(newLinkEl); } });}export default { model: { prop: \"open\", event: \"close\", }, props: { open: { type: Boolean, default: false, }, }, data() { return { windowRef: null, }; }, watch: { open(newOpen) { if (newOpen) { this.openPopup(); } else { this.closePopup(); } }, }, methods: { openPopup() { this.windowRef = window.open( \"\", \"\", \"width=600,height=400,left=200,top=200\" ); this.windowRef.document.body.appendChild(this.$el); copyStyles(window.document, this.windowRef.document); this.windowRef.addEventListener(\"beforeunload\", this.closePopup); }, closePopup() { if (this.windowRef) { this.windowRef.close(); this.windowRef.removeEventListener(\"beforeunload\", this.closePopup); this.windowRef = null; this.$emit(\"close\", false); // 부모창의 binding된 open에게 값을 넘김 } }, }, mounted() { if (this.open) { this.openPopup(); } }, beforeDestroy() { if (this.windowRef) { this.closePopup(); } },};&lt;/script&gt;출처: https://stackoverflow.com/questions/49657462/open-a-vuejs-component-on-a-new-window" }, { "title": "summernote에서 custom dropdown button 만들기", "url": "/posts/summernote%EC%97%90%EC%84%9C-custom-dropdown-button-%EB%A7%8C%EB%93%A4%EA%B8%B0/", "categories": "Javascript", "tags": "summernote, custom dropdown button", "date": "2020-07-07 15:25:00 +0900", "snippet": "주요기능 Custom Button for Dropdown 현재 Focus에 텍스트 삽입// 썸머노트 에디터에서 이전 포커스 위치 정보를 저장var oldEditor = $.summernote.options.modules.editor;$.summernote.options.modules.editor = function () { oldEditor.apply(this, arguments); var oldCreateRange = this.createRange; var oldFocus = this.focus; this.createRange = function () { this.focus = function () {}; var result = oldCreateRange.apply(this, arguments); this.focus = oldFocus; return result; };};// 썸머노트 초기화$(\"#summernote\").summernote({ toolbar: [ [\"color\", [\"color\"]], [\"font\", [\"bold\", \"underline\"]], [\"mybutton\", [\"answer\"]], // custom button add ], buttons: { answer: (context) =&gt; { const ui = $.summernote.ui; const ulStyle = \"margin: 0;padding: 0\"; const liStyle = \"display: block;padding: 3px 20px;clear: both;font-weight: normal;color: #333;white-space: nowrap;\"; let contents = `&lt;ul style=\"${ulStyle}\"&gt;`; for (let i = 0; i &lt; 5; i++) { contents += `&lt;li style=\"${liStyle}\" data-value=\"${i}\"&gt;${i}&lt;/li&gt;`; } contents += \"&lt;/ul&gt;\"; var button = ui.buttonGroup([ ui.button({ className: \"dropdown-toggle\", contents: '&lt;span class=\"fa\"&gt;&lt;/span&gt;버튼이름&lt;span class=\"caret\"&gt;&lt;/span&gt;', tooltip: \"tooltip...\", data: { toggle: \"dropdown\", }, }), ui.dropdown({ className: \"drodown-style\", contents: contents, callback: function ($dropdown) { $dropdown.find(\"li\").each(function () { $(this).click(function () { $(\"#idCardText\").summernote( \"insertText\", \"#{\" + $(this).text() + \"}\" ); }); }); }, }), ]); return button.render(); }, },});// 썸머노트 이벤트 설정$(\"#summernote\").on(\"summernote.blur\", function () { $(\"#summernote\").summernote(\"saveRange\");});$(\"#summernote\").on(\"summernote.focus\", function () { $(\"#summernote\").summernote(\"restoreRange\");});" }, { "title": "no quota left for account aws", "url": "/posts/no-quota-left-for-account-aws/", "categories": "aws", "tags": "aws, sns", "date": "2020-04-24 15:25:00 +0900", "snippet": "AWS SNS의 문자 서비스를 이용중인데 문자 발송이 자꾸 실패하여 로그를 확인해보니no quota left for account aws 에러가 발생했다.사용한 만큼 나중에 과금되는건 맞는데 최대 한도를 초과하면 문자 발송이 안되는거였다.그래서 최대한도를 높여야하는데 그냥 설정으로 높이는건 아니고, AWS 지원센터에서 요청을 해야한다.방법은 다음 링크에 잘 설명되어 있다.월별 최대사용량을 계산하여 요청하고, 요청 내용을 영문으로 풀어서 작성하면된다.https://aws.amazon.com/ko/premiumsupport/knowledge-center/sns-sms-spending-limit-increase내가 작성한 내용: 30달러로 요청하는 내용Limit increase request 1Service: SNS Text MessagingResource Type: General LimitsLimit name: Account Spend Threshold Increase for SMSNew limit value: 30------------Use case description: We need an SMS spending limit of 30 USD to keep the application (mybareum.com) highly available.Our application uses SMS messages to authenticate mobile phones to users.Users need to submit and verify their mobile phone number when creating an account.Customer locations are worldwide, and spending limits must apply to the eu-west-1 AWS Region.It is expected to send 10 SMS messages per hour.Provide a link to the site or app which will be sending SMS messages:What type of messages do you plan to send?: TransactionalWhich countries do you plan to send messages to?:How do your customers opt to receive messages from you? Provide specific information about the opt-in process:Which AWS Region will you be sending messages from?:Please provide the message template that you plan to use to send messages to your customers:답변Hello,Your new SMS monthly spending limit of $30 USD was implemented. This may take up to one hour to reflect in your console.Before you can send messages, you must update your account spend limit using the Amazon SNS console or API ( http://docs.aws.amazon.com/sns/latest/dg/sms_preferences.html ).When you complete these procedures, you may see a message stating that your default limit is $1.00. You can disregard this message.We recommend monitoring metrics for Amazon SNS using CloudWatch ( https://docs.aws.amazon.com/sns/latest/dg/MonitorSNSwithCloudWatch.html ).As you get started with Amazon SNS, we recommend that you:-- Apply for higher spending limits before you need them.-- Open a case in the AWS Support Center to request other SMS options, if needed ( https://console.aws.amazon.com/support/home ).-- Review additional information on sending SMS messages for best practices ( https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-sms-best-practices.html ).*IMPORTANT*Certain countries may require pre-registration of sender IDs and/or templates for successful delivery — please ensure to review the follow document to determine if any of the target countries you intend to send to have these requirements and submit relevant registration requests. (https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html-- If you plan to send messages that will or may contain Protected Health Information (PHI), as defined by the Health Insurance Portability and Accountability Act (HIPAA) and associated legislation, you will be required to register for a dedicated short code. Information on registering for a dedicated short code can be found here: https://docs.aws.amazon.com/sns/latest/dg/sms_shortcodes.htmlThank you for choosing Amazon Web Services.Best regards,Prakash S.Amazon Web ServicesCheck out the AWS Support Knowledge Center, a knowledge base of articles and videos that answer customer questions about AWS services: https://aws.amazon.com/premiumsupport/knowledge-center/?icmpid=support_email_categoryWe value your feedback. Please rate my response using the link below.===================================================To contact us again about this case, please return to the AWS Support Center using the following URL:https://console.aws.amazon.com/support/home#/case/?displayId=6959824691&amp;language=en(If you are connecting by federation, log in before following the link.)*Please note: this e-mail was sent from an address that cannot accept incoming e-mail. Please use the link above if you need to contact us again about this same issue.====================================================================Learn to work with the AWS Cloud. Get started with free online videos and self-paced labs athttp://aws.amazon.com/training/====================================================================Amazon Web Services, Inc. is an affiliate of Amazon.com, Inc. Amazon.com is a registered trademark of Amazon.com, Inc. or its affiliates." }, { "title": "expo eas를 이용하여 apk 빌드", "url": "/posts/expo-eas-build-with-apk/", "categories": "Javascript, React Native", "tags": "React Native", "date": "2020-03-15 15:25:00 +0900", "snippet": "/eas.json{ \"cli\": { \"version\": \"&gt;= 3.1.1\" }, \"build\": { \"development\": { \"developmentClient\": true, \"distribution\": \"internal\" }, \"preview\": { \"distribution\": \"internal\" }, \"production\": { \"android\": { \"buildType\": \"apk\" } } }, \"submit\": { \"production\": {} }}build.production.android.buildType을 apk로 설정하면된다. 디폴트는 aab파일로 빌드된다." }, { "title": "Cannot read property 'Direction' of undefined", "url": "/posts/Cannot-read-property-'Direction'-of-undefined/", "categories": "Javascript, React Native", "tags": "React Native", "date": "2020-03-15 15:25:00 +0900", "snippet": "react-native-gesture-handler 패키지가 link가 안될수도 있어서 다음으로 처리.react-native link react-native-gesture-handler만약 IOS로 실행중이라면 라이브러리가 설치가 안되어 있을 수도 있어서 다음으로 처리.cd iospod install" }, { "title": "unrecognized font family 'material design icons'", "url": "/posts/unrecognized-font-family-material-design-icons/", "categories": "Javascript, React Native", "tags": "React Native, unrecognized font family material design icons", "date": "2020-03-12 00:00:00 +0900", "snippet": "환경 React Native 사용중인 패키지: react-native-vector-icons IOS에서 빌드시 위 에러 발생Info.plist 파일에서 다음을 추가&lt;key&gt;UIAppFonts&lt;/key&gt;&lt;array&gt; &lt;string&gt;AntDesign.ttf&lt;/string&gt; &lt;string&gt;Entypo.ttf&lt;/string&gt; &lt;string&gt;EvilIcons.ttf&lt;/string&gt; &lt;string&gt;Feather.ttf&lt;/string&gt; &lt;string&gt;FontAwesome.ttf&lt;/string&gt; &lt;string&gt;FontAwesome5_Brands.ttf&lt;/string&gt; &lt;string&gt;FontAwesome5_Regular.ttf&lt;/string&gt; &lt;string&gt;FontAwesome5_Solid.ttf&lt;/string&gt; &lt;string&gt;Foundation.ttf&lt;/string&gt; &lt;string&gt;Ionicons.ttf&lt;/string&gt; &lt;string&gt;MaterialIcons.ttf&lt;/string&gt; &lt;string&gt;MaterialCommunityIcons.ttf&lt;/string&gt; &lt;string&gt;SimpleLineIcons.ttf&lt;/string&gt; &lt;string&gt;Octicons.ttf&lt;/string&gt; &lt;string&gt;Zocial.ttf&lt;/string&gt;&lt;/array&gt;참고: stack overflow" }, { "title": "The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.", "url": "/posts/The-sandbox-is-not-in-sync-with-the-Podfile.lock.-Run-'pod-install'-or-update-your-CocoaPods-installation/", "categories": "Javascript, React Native", "tags": "React Native", "date": "2019-12-12 15:25:00 +0900", "snippet": "react-native xcode에서 빌드시 에러발생Pods폴더와 Podfile.lock파일 삭제 후 다시 설치하면됨.$ cd {project root}/iod$ rm -rf Pods$ rm -rf Podfile.lock$ pod installxcode에서 Product &gt; Clean Build Folder" }, { "title": "상위부서, 하위부서 목록 조회", "url": "/posts/%EC%83%81%EC%9C%84%EB%B6%80%EC%84%9C,-%ED%95%98%EC%9C%84%EB%B6%80%EC%84%9C-%EB%AA%A9%EB%A1%9D-%EC%A1%B0%ED%9A%8C/", "categories": "DB, Oracle", "tags": "Oracle, 상위부서, 하위부서", "date": "2013-11-29 00:00:00 +0900", "snippet": "상위부서SELECT 부서코드FROM 부서테이블START WITH 부서코드 = '부서코드'CONNECT BY PRIOR 상위부서코드 = 부서코드하위부서SELECT 부서코드FROM 부서테이블START WITH 상위부서코드 = '부서코드'CONNECT BY PRIOR 부서코드 = 상위부서코드" } ]
